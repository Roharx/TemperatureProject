name: .NET and Angular CI/CD with Docker and E2E Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Restore dependencies
        run: dotnet restore tempProjNew.sln

      - name: Build solution
        run: dotnet build tempProjNew.sln --configuration Release --no-restore

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:~/.dotnet/tools"

      - name: Run SonarQube analysis
        run: dotnet sonarscanner begin /k:"tempProjNew" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.opencover.reportsPaths="TestResults/coverage.opencover.xml" /v:"1.0"

      - name: Build for SonarQube
        run: dotnet build tempProjNew.sln

      - name: Run tests with coverage
        run: |
          mkdir -p TestResults
          dotnet test tempProjNew.sln --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage.opencover.xml /p:CoverletOutputFormat=opencover

      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: TestResults/coverage.opencover.xml

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t roharx/tempproj-backend:latest -f Dockerfile .
          docker push roharx/tempproj-backend:latest

      - name: Build and Push Frontend Docker Image for Testing
        run: |
          cd frontend/temperature-frontend
          npm install
          npm run build -- --configuration=development
          docker build -t roharx/tempproj-frontend:latest .
          docker push roharx/tempproj-frontend:latest

  deploy_test:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: |
            161.97.92.174

      - name: Install Docker Compose and PostgreSQL Client if not installed
        run: |
          ssh -o StrictHostKeyChecking=no root@161.97.92.174 << 'EOF'
            if ! [ -x "$(command -v docker-compose)" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            if ! [ -x "$(command -v psql)" ]; then
              sudo apt-get update
              sudo apt-get install -y postgresql-client
            fi
          EOF

      - name: Deploy to Test Environment
        env:
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB }}
        run: |
          ssh -o StrictHostKeyChecking=no root@161.97.92.174 << 'EOF'
            cd /path/to/your/software/root/db
            docker-compose pull

            docker-compose up -d app-database
            docker-compose up flyway
            docker-compose up -d

            # Ensure PostgreSQL is running before executing psql command
            until PGPASSWORD=${POSTGRES_PASSWORD} psql -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c '\q'; do
              >&2 echo "PostgreSQL is unavailable - sleeping"
              sleep 5
            done

            # Run additional migration script for test data
            PGPASSWORD=${POSTGRES_PASSWORD} psql -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f ./sql/V9__InsertTestUser.sql

            docker stop watchtower || true
            docker rm watchtower || true

            docker run -d --name watchtower \
              -v /var/run/docker.sock:/var/run/docker.sock \
              containrrr/watchtower
          EOF

  e2e_test:
    runs-on: ubuntu-latest
    needs: deploy_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        working-directory: ./frontend/temperature-frontend
        run: npm install

      - name: Install Playwright browsers
        working-directory: ./frontend/temperature-frontend
        run: npx playwright install

      - name: Run e2e tests
        working-directory: ./frontend/temperature-frontend
        env:
          BASE_URL: http://161.97.92.174
        run: npx playwright test tests/

  build_deployment_images:
    runs-on: ubuntu-latest
    needs: e2e_test
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Docker Image for Deployment
        run: |
          cd frontend/temperature-frontend
          npm install
          npm run build -- --configuration=production
          docker build -t roharx/tempproj-frontend:latest .
          docker push roharx/tempproj-frontend:latest

      - name: Build and Push Backend Docker Image for Deployment
        run: |
          docker build -t roharx/tempproj-backend:latest -f Dockerfile .
          docker push roharx/tempproj-backend:latest

  deploy_production:
    runs-on: ubuntu-latest
    needs: build_deployment_images
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          known_hosts: |
            161.97.92.158

      - name: Install Docker Compose and PostgreSQL Client if not installed
        run: |
          ssh -o StrictHostKeyChecking=no root@161.97.92.158 << 'EOF'
            if ! [ -x "$(command -v docker-compose)" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            if ! [ -x "$(command -v psql)" ]; then
              sudo apt-get update
              sudo apt-get install -y postgresql-client
            fi
          EOF

      - name: Deploy to Production Environment
        env:
          POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
        run: |
          ssh -o StrictHostKeyChecking=no root@161.97.92.158 << 'EOF'
            cd /path/to/your/software/root/db
            docker-compose pull

            docker-compose up -d app-database
            docker-compose up flyway
            docker-compose up -d

            # Ensure PostgreSQL is running before executing psql command
            until PGPASSWORD=${POSTGRES_PASSWORD} psql -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c '\q'; do
              >&2 echo "PostgreSQL is unavailable - sleeping"
              sleep 5
            done

            docker stop watchtower || true
            docker rm watchtower || true

            docker run -d --name watchtower \
              -v /var/run/docker.sock:/var/run/docker.sock \
              containrrr/watchtower
          EOF
