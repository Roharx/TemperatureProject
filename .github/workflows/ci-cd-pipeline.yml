name: .NET and Angular CI/CD with Docker and E2E Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Restore dependencies
        run: dotnet restore tempProjNew.sln

      - name: Build solution
        run: dotnet build tempProjNew.sln --configuration Release --no-restore

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:~/.dotnet/tools"

      - name: Run SonarQube analysis
        run: dotnet sonarscanner begin /k:"tempProjNew" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.opencover.reportsPaths="TestResults/coverage.opencover.xml" /v:"1.0"

      - name: Build for SonarQube
        run: dotnet build tempProjNew.sln

      - name: Run tests with coverage
        run: |
          mkdir -p TestResults
          dotnet test tempProjNew.sln --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage.opencover.xml /p:CoverletOutputFormat=opencover

      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: TestResults/coverage.opencover.xml

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t roharx/tempproj-backend:latest -f Dockerfile .
          docker push roharx/tempproj-backend:latest

      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t roharx/tempproj-frontend:latest -f frontend/temperature-frontend/Dockerfile frontend/temperature-frontend
          docker push roharx/tempproj-frontend:latest

  deploy_test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: |
            161.97.92.174

      - name: Deploy to Test Environment
        run: |
          ssh -o StrictHostKeyChecking=no root@161.97.92.174 << 'EOF'
            docker pull roharx/tempproj-backend:latest
            docker pull roharx/tempproj-frontend:latest

            docker stop tempprojnew-backend || true
            docker rm tempprojnew-backend || true

            docker stop temperature-frontend || true
            docker rm temperature-frontend || true

            docker run -d -p 5296:8080 --name tempprojnew-backend \
              -e projTempPostgres="${{ secrets.PROJTEMPPOSTGRES }}" \
              -e MQTT_USERNAME="${{ secrets.MQTT_USERNAME }}" \
              -e MQTT_PASSWORD="${{ secrets.MQTT_PASSWORD }}" \
              roharx/tempproj-backend:latest

            docker run -d -p 80:80 --name temperature-frontend roharx/tempproj-frontend:latest
          EOF

  e2e_test:
    runs-on: ubuntu-latest
    needs: deploy_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        working-directory: ./frontend/temperature-frontend
        run: npm install

      - name: Run e2e tests
        working-directory: ./frontend/temperature-frontend
        env:
          BASE_URL: http://161.97.92.174
        run: npm run e2e
